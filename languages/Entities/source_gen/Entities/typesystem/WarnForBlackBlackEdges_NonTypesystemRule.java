package Entities.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.smodel.SModelUtil_new;

public class WarnForBlackBlackEdges_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public WarnForBlackBlackEdges_NonTypesystemRule() {
  }
  public void applyRule(final SNode e, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(e, MetaAdapterFactory.getReferenceLink(0xd148f330d2ed4fdeL, 0x8721b49b33fc58f7L, 0x25885ed4fbbb855dL, 0x25885ed4fbbb8648L, "source")), MetaAdapterFactory.getConcept(0xd148f330d2ed4fdeL, 0x8721b49b33fc58f7L, 0x25885ed4fbbb5393L, "Entities.structure.BlackNode")) && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(e, MetaAdapterFactory.getReferenceLink(0xd148f330d2ed4fdeL, 0x8721b49b33fc58f7L, 0x25885ed4fbbb855dL, 0x25885ed4fbbb864aL, "target")), MetaAdapterFactory.getConcept(0xd148f330d2ed4fdeL, 0x8721b49b33fc58f7L, 0x25885ed4fbbb5393L, "Entities.structure.BlackNode"))) {
      {
        MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportWarning(e, "You can use purple edges for black-black nodes", "r:33f95b4b-1047-4950-af4a-184eff008545(Entities.typesystem)", "2704515845085579921", null, errorTarget);
      }
      {
        MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportWarning(SLinkOperations.getTarget(e, MetaAdapterFactory.getReferenceLink(0xd148f330d2ed4fdeL, 0x8721b49b33fc58f7L, 0x25885ed4fbbb855dL, 0x25885ed4fbbb8648L, "source")), "Change this!", "r:33f95b4b-1047-4950-af4a-184eff008545(Entities.typesystem)", "2704515845085603760", null, errorTarget);
      }
    }
  }
  public String getApplicableConceptFQName() {
    return "Entities.structure.OrangeEdge";
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getQualifiedName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }
  public boolean overrides() {
    return false;
  }
}
