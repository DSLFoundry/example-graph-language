package Entities.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SReferenceLinkId;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseScopeProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.ReferencePresentationContext;
import Entities.behavior.Node_Behavior;

public class Edge_Constraints extends BaseConstraintsDescriptor {
  public Edge_Constraints() {
    super(MetaIdFactory.conceptId(0xd148f330d2ed4fdeL, 0x8721b49b33fc58f7L, 0x25885ed4fbbb855dL));
  }
  @Override
  protected Map<SReferenceLinkId, ReferenceConstraintsDescriptor> getNotDefaultSReferenceLinks() {
    Map<SReferenceLinkId, ReferenceConstraintsDescriptor> references = new HashMap<SReferenceLinkId, ReferenceConstraintsDescriptor>();
    references.put(MetaIdFactory.refId(0xd148f330d2ed4fdeL, 0x8721b49b33fc58f7L, 0x25885ed4fbbb855dL, 0x25885ed4fbbb8648L), new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0xd148f330d2ed4fdeL, 0x8721b49b33fc58f7L, 0x25885ed4fbbb855dL, 0x25885ed4fbbb8648L), this) {
      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseScopeProvider() {
          @Override
          public boolean hasPresentation() {
            return true;
          }
          @Override
          public String getPresentation(final IOperationContext operationContext, final ReferencePresentationContext _context) {
            return Node_Behavior.call_qualifiedName_2704515845085642415(_context.getParameterNode());
            int a = 1 + (3 + 5 + 4);
          }
        };
      }
    });
    return references;
  }
}
